#!/bin/bash
#
# Automate the setup process of a linux distro clean install

RED='\e[31m'
ERED='\e[0m'

FEDORA_PACKAGES=(
    "python3-pip"
    "btop"
    "nvtop"
    "powertop"
    "gnome-tweaks"
    "gnome-shell-extension-dash-to-dock"
    "gnome-shell-extension-appindicator"
    "gnome-pomodoro"
    #"gnome-shell-extension-caffeine"
)

UBUNTU_PACKAGES=(
    "python3-pip"
    "git"
    "curl"
    "unzip"
    "gnome-tweaks"
    "gnome-shell-pomodoro"
    #"gnome-shell-extension-caffeine"
)

DEBIAN_PACKAGES=(
    "python3"
    "python3-pip"
    "git"
    "curl"
    "unzip"
)

ADDITIONAL_DEBIAN_NON_WSL_PACKAGES=(
    "gnome-tweaks"
    "gnome-shell-extension-appindicator"
    "gnome-shell-pomodoro"
    #"gnome-shell-extension-caffeine"
)

FLATPAK_PACKAGES=(
    "com.mattjakeman.ExtensionManager"
    "com.github.tchx84.Flatseal"
    "io.github.peazip.PeaZip"
    "org.qbittorrent.qBittorrent"
    "com.github.johnfactotum.Foliate"
    "app.drey.Warp"
    "org.videolan.VLC"
    "com.github.unrud.VideoDownloader" 
    "com.opera.Opera"
    #"org.telegram.desktop"
    #"md.obsidian.Obsidian"
    #"com.rafaelmardojai.Blanket"
)

# Determine the distribution
distro=$(. /etc/os-release && echo "$ID")
package_manager=""

# Select packages and package manager accordingly to distributions
suggest_restart=false


prepare_running_conditions(){
    supported_distros=("fedora" "debian" "ubuntu")
    found_distro=false
    for supported_distro in "${supported_distros[@]}"; do
        if [[ "$distro" == "$supported_distro" ]]; then
            found_distro=true
            break
        fi
    done

    if ! "$found_distro"; then
        echo "The current Linux distribution is not supported."
        echo "This script is only intended for running on ${supported_distros[@]}."
        echo "Exiting..."
        exit 1
    fi

    if [[ -z "$WSL_DISTRO_NAME" && "$XDG_CURRENT_DESKTOP" != *GNOME* ]];  then
        echo "The current Desktop Environment is not supported."
        echo "This script is only intended for running on GNOME."
        echo "Exiting..."
        exit 1
    fi

    # Check for system's pending restart
    case "$distro" in
    "fedora")
        ! sudo dnf needs-restarting -r &> /dev/null
        ;;
    "debian" | "ubuntu")
        [ -f /var/run/reboot-required ] || [ -d /var/run/reboot-required.d ]
        ;;
    esac
    if [[ "$?" -eq 0 ]]; then
        echo "Your system has pending updates, please restart it and re-run the script."
        echo "Exiting..."
        exit 1
    fi

    # Select package manager and update its cache
    echo "Updating package manager cache..."
    case "$distro" in
    "fedora")
        sudo dnf makecache -y
        package_manager="dnf"
        ;;
    "debian" | "ubuntu")
        sudo apt update -y
        package_manager="apt"
        ;;
    esac
}


# Check if a package is installed
is_package_installed() {
    local package=$1
    case "$distro" in
        "fedora")
            rpm -q "$package" &> /dev/null
            ;;
        "debian" | "ubuntu")
            dpkg -s "$package" &> /dev/null
            ;;
    esac
}


# Check if a package is available to install
is_package_available() {
    local package=$1
    case "$distro" in
        "fedora")
            dnf info "$package" &> /dev/null
            ;;
        "debian" | "ubuntu")
            apt-cache show "$package" &> /dev/null
            ;;
    esac
}


# Check if a flatpak package is installed
is_flatpak_package_installed() {
    local package=$1
    flatpak list --app --columns=application | grep -q "^$package$" &> /dev/null
}


# Check if a flatpak package is available
is_flatpak_package_available() {
    local package=$1
    flatpak remote-info --cached flathub "$package" &> /dev/null
}


# Function to populate the .zshrc file
populate_zshrc_file() {
    local zshrc_path="$HOME/.zshrc"
    local zshrc_content=$(cat <<- 'EOF'

# Set vim keybindings
bindkey -v

# Do not keep history duplicates
setopt histignorealldups sharehistory

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=5000
SAVEHIST=5000
HISTFILE=~/.zsh_history

# Aliases
alias ls='ls --color=auto'
alias ll='ls -lah --color=auto'
alias grep='grep --color=auto'
alias cperf='echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'
alias vperf='cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor'
alias vbat='sudo powertop --time=10'
EOF
)
    echo "$zshrc_content" > "$zshrc_path"
}


add_zplug_to_zshrc_file() {
    local zshrc_path="$HOME/.zshrc"
    local zplug_content=$(cat <<- 'EOF'
source ~/.zplug/init.zsh
#zplug "plugins/git", from:oh-my-zsh
#zplug "plugins/sudo", from:oh-my-zsh
#zplug "plugins/command-not-found", from:oh-my-zsh
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-history-substring-search"
zplug "romkatv/powerlevel10k, as:theme, depth:1"
#zplug "zsh-users/zsh-completions"
#zplug "junegunn/fzf"
#zplug "themes/robbyrussell", from:oh-my-zsh, as:theme   # Theme

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down


# zplug - install/load new plugins when zsh is started or reloaded
if ! zplug check; then
    echo "zplug wants to install the plugins sourced in the .zshrc file. Proceed? [y/N]: "
	if read -q; then
	    echo; zplug install
	fi
fi
zplug load
EOF
)
    echo "$zplug_content" >> "$zshrc_path"
}


install_packages() {
    #############################
    # Install system packages or dependencies based on the configured package manager.
    # This function checks if packages are installed and available, prompts the user
    # for confirmation, and installs the required packages using the system's package manager.
    #
    # Globals:
    #   package_manager: str (The package manager to be used for installation)
    #
    # Arguments:
    #   packages: list (List of packages to be installed)
    #
    # Returns:
    #   None
    #############################

    local packages=("$@")

    local to_install=()
    # Check for availability, do not add to the list if it is already installed
    for package in "${packages[@]}"; do
        if ! is_package_available "$package"; then
            echo "The package $package is not available in the remote repository."
            echo "Manual checking will be required."
            echo "Exiting..."
            exit 1
        fi
        if ! is_package_installed "$package" ; then
            to_install+=("$package")
        fi
    done
    
    if [[ "${#to_install[@]}" -gt 0 ]]; then
        read -p "The following packages will be installed: ${to_install[*]}. Proceed? (y/N) " choice
        case "$choice" in
            y|Y)
                sudo $package_manager install -y "${to_install[@]}" #> /dev/null
                ;;
            *)
                echo "Packages installations aborted."
                echo "Either perform a manual check or re-run the script and accept to install the required packages."
                echo "Exiting..."
                exit 1
                ;;
        esac
    fi
}


install_system_packages() {
    # List of packages to install
    local packages=()

    echo
    echo "Installing distro packages..."

    case "$distro" in
    "fedora")
        packages=("${FEDORA_PACKAGES[@]}")
        ;;
    "ubuntu")
        packages=("${UBUNTU_PACKAGES[@]}")
        ;;
    "debian")
        packages=("${DEBIAN_PACKAGES[@]}")
        if [[ -z "$WSL_DISTRO_NAME" ]]; then
            packages+=("${ADDITIONAL_DEBIAN_NON_WSL_PACKAGES[@]}")
        fi
        ;;
    esac
    
    install_packages "${packages[@]}"
}


customize_terminal(){
    #############################
    # Customizes the terminal.
    # This funciton installs and sets zsh as default shell, populates the .zshrc file in order to get 
    # completions, syntax highlighting, history substring search, downloads and uses zplug as the plugin 
    # manager and adds Caskaydia Nerd Font to the system fonts.
    #
    # Globals:
    #   None
    #
    # Arguments:
    #	None
    #
    # Returns:
    #   None
    #############################
    echo
    echo "Setting up terminal..."
    
    local dependencies=("zsh" "curl" "unzip" "git")
    install_packages "${dependencies[@]}"

    echo
    echo "Configuring zsh..."

    if [ -s ~/.zshrc ]; then
        log_messages+="${RED}-The file ~/.zhsrc had an existing configuration. Skipped its modification.${ERED}\n(If you would like to overwrite the existing config, delete it and re-run this script with the same selected option)\n"
    else
        populate_zshrc_file
    fi

    echo
    echo "Configuring zplug..."

    if [ -d ~/.zplug ]; then
        log_messages+="${RED}-The directory ~/.zplug already existed. Skipped its creation.${ERED}\n(If you would like to overwrite the existing folder, delete it and re-run this script with the same selected option)\n"
    else
	    curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
    fi
    
    if grep -q "source ~/.zplug/init.zsh" ~/.zshrc; then
        log_messages+="${RED}-zplug was already sourced in ~/.zshrc. Skipped ~/.zshrc modification.${ERED}\n(If you don't notice any plugins working on the terminal, manually verify what's missing in the ~/.zshrc file)\n"
    else
        add_zplug_to_zshrc_file
    fi


    echo
    echo "Adding Caskaydia Nerd Font to system fonts..."
    
    font_name="CascadiaMono"
    fonts_dir="/usr/share/fonts"
    font_path="$fonts_dir/$font_name"

    if [[ -n "$WSL_DISTRO_NAME" ]]; then
        log_messages+="-There is no need to add Caskaydia Nerd Font on WSL. Skipped.\n"
    elif [ -d $font_path ]; then
        log_messages+="-The directory $font_path already existed. Skipped its creation.\n"
    else
        # Download the latest Caskaydia Nerd Font
        curl -L -s -o ~/$font_name.zip $(curl -s https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest | grep "browser_download_url.*$font_name.zip" | cut -d '"' -f 4)
        sudo unzip ~/$font_name.zip '*.ttf' -d "$font_path" > /dev/null
        rm ~/$font_name.zip
        # Update the font cache
        sudo fc-cache -f -v > /dev/null
    fi

    echo
    echo "Setting shell to zsh..."
    
    if [ -n "$SHELL" ] && [ "$SHELL" = "/usr/bin/zsh" ]; then
        log_messages+="-zsh was already set as the default shell. Skipped.\n"
    else
        chsh -s $(which zsh)
        suggest_restart=true
    fi
}


setup_neovim(){
    echo
    echo "Neovim setup..."

    if is_package_installed "neovim"; then
        log_messages+="-Neovim was already installed. Skipped its installation.\n"
    else
        local dependencies=()
        case "$distro" in
        "fedora")
            dependencies=("git" "neovim")
            install_packages "${dependencies[@]}"
            ;;
        "debian" | "ubuntu")
            dependencies=(
                "git"
                "file"
                "ninja-build"
                "gettext"
                "cmake"
                "unzip"
                "curl"
                "build-essential"
            )
            install_packages "${dependencies[@]}"

            cd ~/ && git clone https://github.com/neovim/neovim
            cd neovim && git checkout stable
            make CMAKE_BUILD_TYPE=Release
            cd build && cpack -G DEB && sudo dpkg -i nvim-linux64.deb
            cd ~/ && rm -rf neovim
            ;;
        esac
    fi


    local kickstart_path="${XDG_CONFIG_HOME:-$HOME/.config}/nvim"

    if [ -d "$kickstart_path" ]; then
        log_messages+="${RED}-The directory ${kickstart_path} already existed. Skipped kickstart neovim setup.${ERED}\n(If you would like to overwrite the existing nvim folder with kickstart, delete it and re-run this script with the same selected option)\n"
    else
        # Kickstart nvim
        git clone https://github.com/nvim-lua/kickstart.nvim.git "${XDG_CONFIG_HOME:-$HOME/.config}"/nvim
    fi

}


setup_git(){
    echo
    echo "Git setup..."

    local dependencies=("git")
    install_packages "${dependencies[@]}"

    # Check if user.name is configured
    if [ -z "$(git config --get user.name)" ]; then
        read -p "Enter the username for your github account: " username
        git config --global user.name "$username"
    else
        log_messages+="-A git username was already set. Skipped.\n"
    fi

    # Check if user.email is configured
    if [ -z "$(git config --get user.email)" ]; then
        read -p "Enter the email for your github account: " email
        git config --global user.email "$email"
    else
        log_messages+="-A git email was already set. Skipped.\n"
    fi

    if [ -d ~/.ssh ] && [ -n "$(ls -A ~/.ssh)" ]; then
        log_messages+="${RED}-The directory ~/.ssh already existed and it was not empty. Skipped its creation.${ERED}\n(If you would like to overwrite the existing ~/.ssh folder, delete it (IT WILL ERASE YOUR EXISTING SSH KEYS) and re-run this script with the same selected option)\n"
        return 0
    fi

    echo -e "${RED}On each prompt press <Enter> for accepting a default key filename and an empty passphrase.${ERED}"
    ssh-keygen -t ed25519 -C "$email"
    
    eval "$(ssh-agent -s)"
    
    ssh-add ~/.ssh/id_ed25519

    log_messages+="${RED}-Copy the following ssh key and add it to your github account; go to and follow from step 2:\nhttps://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account\n$(cat ~/.ssh/id_ed25519.pub)\n${ERED}"
}


install_flatpak_packages() {
    if [[ -n "$WSL_DISTRO_NAME" ]]; then
        log_messages+="-Skipped flatpak installation on WSL.\n"
        return 0
    fi

    echo
    echo "Installing flatpak packages..."

    # Only run on Debian-based distributions
    if ! is_package_installed "flatpak"; then
        local dependencies=("flatpak" "gnome-software-plugin-flatpak")        
        
        install_packages "${dependencies[@]}"
        
        # Add flathub remote if not already added
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        
        # Inform the user about the required restart
        log_messages+="${RED}-Flatpak was successfully installed, a restart will be required before installing flatpak packages\n${ERED}"
        suggest_restart=true
        return 0
    fi

    local to_install=()
    for package in "${FLATPAK_PACKAGES[@]}"; do
	    if is_flatpak_package_available "$package"; then
            if ! is_flatpak_package_installed "$package"; then
		        to_install+=("$package")
            fi
	    else
		    log_messages+="-The flatpak package $package was not available in the remote repository. Skipped its installation.\n"
	    fi
    done

    if [[ "${#to_install[@]}" -gt 0 ]]; then
        read -p "The following Flatpak packages will be installed: ${to_install[*]}. Proceed? (y/N) " choice
        case "$choice" in
            y|Y)
                flatpak install -y --noninteractive flathub "${to_install[@]}"
                ;;
            *)
                echo "Skipped."
                ;;
        esac
    fi
}


set_faster_downloads_fedora(){
    echo
    echo "Configuring dnf..."
    
    if [[ "$distro" != "fedora" ]]; then
        echo "Current distribution is not Fedora."
        echo "Exiting..."
        return 0
    fi

    # Check if the values are already present
    if grep -q "^max_parallel_downloads=10$" /etc/dnf/dnf.conf && grep -q "^fastestmirror=True$" /etc/dnf/dnf.conf; then
        log_messages+="-The values max_parallel_donwloads and fastestmirror were already present in /etc/dnf/dnf.conf. Skipped.\n"
        return 0
    fi

    echo -e "max_parallel_downloads=10\nfastestmirror=True" | sudo tee -a /etc/dnf/dnf.conf > /dev/null
    suggest_restart=true
}


install_additional_media_codecs_fedora(){
    echo
    echo "Installing additional media codecs..."
	
    if [[ "$distro" != "fedora" ]]; then
        echo "Current distribution is not Fedora."
        echo "Exiting..."
        return 0
    fi

	# https://rpmfusion.org/Configuration
	# Installing Free and Nonfree Repositories
	sudo dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
	
    # On Fedora, we default to use the openh264 library
	sudo dnf config-manager --enable fedora-cisco-openh264

	# RPM Fusion repositories also provide Appstream metadata to enable users to install # packages using Gnome Software/KDE Discover
	sudo dnf update -y @core
	
	# https://rpmfusion.org/Howto/Multimedia#Hardware_codecs_with_AMD_.28mesa.29
	# Switch to full ffmpeg
	sudo dnf swap -y ffmpeg-free ffmpeg --allowerasing

	# Install additional codecs
	sudo dnf groupupdate -y multimedia --setop="install_weak_deps=False" --exclude=PackageKit-gstreamer-plugin
	sudo dnf groupupdate -y sound-and-video

	if grep -q AuthenticAMD /proc/cpuinfo; then
        sudo dnf swap -y mesa-va-drivers mesa-va-drivers-freeworld
        sudo dnf swap -y mesa-vdpau-drivers mesa-vdpau-drivers-freeworld
	elif grep -q GenuineIntel /proc/cpuinfo; then
        sudo dnf install -y intel-media-driver
	else
        log_messages+="The installation of aditional media codecs was skipped due to the support of only AMD and Intel platforms.\n"
        return 0
	fi

	# Make available vainfo (not necessary)
	#sudo dnf install libva-utils

	# https://fedoraproject.org/wiki/OpenH264
	# enable OpenH264 on firefox
	sudo dnf install -y mozilla-openh264

	log_messages+="${RED}-To enable hardware acceleration on Firefox you should:${ERED}\n Make sure to enable it on settings\n Enable OpenH264 add-on (from Cisco) on Firefox's Plugins\n In about:config (type it in the search bar) set the following fields to true:\n media.ffmpeg.vaapi.enabled\n gfx.webrender.all\n media.gmp-gmpopenh264.autoupdate\n media.gmp-gmpopenh264.enabled\n media.gmp-gmpopenh264.provider.enabled\n"
}


set_governor_to_performance_fedora(){
    echo
    echo "Setting governor mode to performance..."
    
    if [[ "$distro" != "fedora" ]]; then
        echo "Current distribution is not Fedora."
        echo "Exiting..."
        return 0
    fi

    # Check if the governor is already in performance mode and skip
    # the service creation
    governor=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor) 

    if [ "$governor" = "performance" ]; then
        log_messages+="-The CPU scaling governor was already set to 'performance'\nThere was no need to create a startup service for it. Skipped.\n"
        return 0
    fi
    
    local script_name="change_governor.sh"
    local script_dir="$HOME/.startup_scripts"
    local script_path="$script_dir/$script_name"
    local script_content=$(cat <<- 'EOF'
#!/usr/bin/bash
echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
EOF
)

    local service_name="change_governor.service"
    local service_dir="/etc/systemd/system"
    local service_path="$service_dir/$service_name"
    local service_content=$(envsubst <<- EOF
[Unit]
Description=Change governor to performance

[Service]
ExecStart=/usr/bin/bash $script_path
User=root
Group=root
Type=simple
RemainAfterExit=no

[Install]
WantedBy=multi-user.target
EOF
)

    if [ -f "$script_path" ]; then
        log_messages+="-The $script_name already existed in $script_dir.\nThere was no need to create it. Skipped.\n"
        return 0
    fi

    mkdir "$script_dir" && touch "$script_path"
    echo "$script_content" > "$script_path"
    sudo chmod +x "$script_path"

    if [ -f "$service_path" ]; then
        log_messages+="${RED}-The $service_name already existed in $service_dir.\nThere was no need to create it. Skipped.\nManual checking will be required.\nYou are advised to run:\nsudo systemctl status $service_name\n${ERED}"
        return 0
    fi

    sudo touch "$service_path"
    echo "$service_content" | sudo tee "$service_path" > /dev/null
    sudo chmod +x "$service_path"

    sudo systemctl daemon-reload > /dev/null
    sudo systemctl enable "$service_name" > /dev/null
    sudo systemctl start "$service_name" > /dev/null
    suggest_restart=true

}


set_yaru_icons_fedora(){
    echo
    echo "Setting yaru icons... "

    if [[ "$distro" != "fedora" ]]; then
        echo "Current distribution is not Fedora."
        echo "Exiting..."
        return 0
    fi

    current_icon_theme=$(gsettings get org.gnome.desktop.interface icon-theme)

    local icon_theme='Yaru-prussiangreen-dark'
    if [[ "$current_icon_theme" == *Yaru* ]]; then
        log_messages+="-The $current_icon_theme icons were already enabled. Skipped.\n"
        return 0
    fi

    local dependencies=("yaru-theme") 
    install_packages "${dependencies[@]}"

    #gsettings set org.gnome.desktop.interface gtk-theme 'Yaru-prussiangreen-dark'
    #gsettings set org.gnome.desktop.wm.preferences theme 'Yaru'
    gsettings set org.gnome.desktop.interface icon-theme "$icon_theme"
}


main(){
    clear
    prepare_running_conditions

    while true; do
        log_messages=""
        echo
        echo "==================================================================="
        echo "Options"
        echo "-------------------------------------------------------------------"
        echo "1- System setup"
        echo "-------------------------------------------------------------------"
        echo "  . install required dependencies"
        echo "  . download CaskaydiaMono Nerd Font (manual setup required) (*)"
        echo "  . create a default .zshrc (*)"
        echo "  . install zplug and add zplug config to .zhsrc (*)" 
        echo "  . set zsh as default user shell (*)"
        echo "  . install neovim (*)"
        echo "  . download and set kickstart nvim (*)"
        echo "  . install git (*)"
        echo "  . set git global user and name (*)"
        echo "  . generate a ssh key (further manual actions are required on github) (*)"
        echo "-------------------------------------------------------------------"
        echo "2- Install flatpak packages (*)"
        echo "-------------------------------------------------------------------"
        echo "3- Full system setup (option 1 and 2)"
        echo "-------------------------------------------------------------------"
        echo "------------------------ FEDORA ONLY ------------------------------"
        echo "-------------------------------------------------------------------"
        echo "4- Configure dnf for faster downloads (*)"
        echo "-------------------------------------------------------------------"
	    echo "5- Install additional non-free media codecs to enable h.264 support"
        echo "-------------------------------------------------------------------"
        echo "6- Permanent set the governor mode to performance (*)"
        echo "-------------------------------------------------------------------"
        echo "7- Set yaru icon theme (*)"
        echo "-------------------------------------------------------------------"
        echo "q- Quit"
        echo "==================================================================="
        echo "(*) - if not exists/set/configured"

        read -p "Enter the option/s you would like to perform (1, 2, 3, 4, 5, 6, 7 or q): " selection
        case "$selection" in
            1)
                install_system_packages
                customize_terminal
                setup_neovim
                setup_git
                ;;
            2)
                install_flatpak_packages
                ;;
            3)
                install_system_packages
                customize_terminal
                setup_neovim
                install_flatpak_packages
                setup_git
                ;;
            4)
                set_faster_downloads_fedora
                ;;
            5)

                install_additional_media_codecs_fedora
                ;;
            6)
                set_governor_to_performance_fedora
                ;;
            7)
                set_yaru_icons_fedora
                ;;
            
            q)
                echo "Exiting..."
                exit 0
                ;;
            *)
                echo "Invalid selection."
                continue
                ;;
        esac
        
        echo
        echo "-----------------------------Summary-------------------------------"
        echo -e "${log_messages}"
        echo "-------------------------------------------------------------------"

        if "$suggest_restart"; then
            echo "Some changes need a system restart to take effect."
            echo "Please restart your system to finish."
            echo "Exiting..."
            exit 0
        fi
        echo "READ the above summary before continuing, pay attention to the RED ones."
        read -p "Press Enter to continue..."
    done
}

main
