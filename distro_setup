#!/bin/bash
#
# Automate the setup process of a linux DISTRO clean install

## Color Constants
HIGHLIGHT='\e[1;35m'
NC='\e[0m'  # No Color
ERROR_COLOR="\e[31m[ERROR]\e[0m"
SUCCESS_COLOR="\e[32m[SUCCESS]\e[0m"
WARNING_COLOR="\e[93m[WARNING]\e[0m"
INFO_COLOR="\e[35m[INFO]\e[0m"

## Timeout given to the user to skip optional and flatpack packages installations
TIMEOUT=10

## Global Variables
LOG_FILE="distro_setup_logs.txt"
PACKAGE_MANAGER=""
is_restart_required=false

ZSHRC_PATH="$HOME/.zshrc"

## Determine the Distribution
DISTRO=$(. /etc/os-release && echo "$ID")

FEDORA_PACKAGES=(
    "python3-pip"
    "golang"
    "btop"
    "nvtop"
    "powertop"
    "gnome-tweaks"
    "gnome-shell-extension-dash-to-dock"
    "gnome-shell-extension-appindicator"
    "gnome-shell-extension-caffeine"
    "gnome-pomodoro"
)

UBUNTU_PACKAGES=(
    "python3-pip"
    "gnome-tweaks"
    "gnome-shell-pomodoro"
    "caffeine"
)

DEBIAN_PACKAGES=(
    "python3"
    "python3-pip"
)

DEBIAN_NON_WSL_PACKAGES=(
    "gnome-tweaks"
    "gnome-shell-extension-appindicator"
    "gnome-shell-pomodoro"
    "gnome-shell-extension-caffeine"
)

FLATPAK_PACKAGES=(
    "com.github.tchx84.Flatseal"
    "io.github.peazip.PeaZip"
    "org.qbittorrent.qBittorrent"
    "com.github.johnfactotum.Foliate"
    "org.videolan.VLC"
    "com.github.unrud.VideoDownloader" 
    "com.mattjakeman.ExtensionManager"
    "com.rafaelmardojai.Blanket"
    #"com.opera.Opera"
    #"md.obsidian.Obsidian"
    #"app.drey.Warp"
)


## Helper functions

log_info() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') \e[35m[INFO]\e[0m $1" >> "$LOG_FILE"
}

log_warning() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') \e[93m[WARNING]\e[0m $1" >> "$LOG_FILE"
}

log_error() {
    #echo -e "\e[31m[ERROR]\e[0m $1"
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') \e[31m[ERROR]\e[0m $1" >> "$LOG_FILE"
}

log_success() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') \e[32m[SUCCESS]\e[0m $1" >> "$LOG_FILE"
}

# Check if a package is installed
is_package_installed() {
    local package=$1
    case "$DISTRO" in
        "fedora")
            rpm -q "$package" &> /dev/null
            ;;
        "debian" | "ubuntu")
            dpkg -s "$package" &> /dev/null
            ;;
    esac
}


# Check if a package is available to install
is_package_available() {
    local package=$1
    case "$DISTRO" in
        "fedora")
            # avoid the package manager to halt with repo related prompts
            dnf info "$package" &> /dev/null
            ;;
        "debian" | "ubuntu")
            apt-cache show "$package" &> /dev/null
            ;;
    esac
}


# Check if a flatpak package is installed
is_flatpak_package_installed() {
    local package=$1
    flatpak list --app --columns=application | grep -q "^$package$" &> /dev/null
}


# Check if a flatpak package is available
is_flatpak_package_available() {
    local package=$1
    flatpak remote-info --cached flathub "$package" &> /dev/null
}


flush_input_buffer(){
    # To avoid any pressed key before prompting anything to the user
    while read -t 0.2 -n 1; do : ; done
}

# Function to populate the .zshrc file
zshrc_content=$(cat <<- 'EOF'
# Set vim keybindings
bindkey -v

# Do not keep history duplicates
setopt histignorealldups sharehistory

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=5000
SAVEHIST=5000
HISTFILE=~/.zsh_history

# General aliases
alias ls='ls --color=auto'
alias ll='ls -lah --color=auto'
alias grep='grep --color=auto'
alias vbat='sudo powertop --time=10'
alias vlc='nohup flatpak run org.videolan.VLC . > /dev/null 2>&1 &'
EOF
)

# Fedora-specific aliases
if [[ $DISTRO == "fedora" ]]; then
    zshrc_content+="
alias usys='sudo dnf update -y && flatpak update -y'
alias vperf='cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor'
alias cperf='echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'
alias msys='ptyxis --new-window -x "nvtop"; ptyxis --tab -x "btop"; ptyxis --tab -x \"sudo powertop --time=10\"'"
fi


zplug_content=$(cat <<- 'EOF'
# Zplug
# Uncomment the ones you want also to add
source ~/.zplug/init.zsh
#zplug "plugins/git", from:oh-my-zsh
#zplug "plugins/sudo", from:oh-my-zsh
#zplug "plugins/command-not-found", from:oh-my-zsh
zplug "zsh-users/zsh-syntax-highlighting"
#zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-history-substring-search"
zplug "romkatv/powerlevel10k, as:theme, depth:1"
#zplug "zsh-users/zsh-completions"
#zplug "junegunn/fzf"
#zplug "themes/robbyrussell", from:oh-my-zsh, as:theme   # Theme

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down

# zplug - install/load new plugins when zsh is started or reloaded
if ! zplug check; then
    echo -e "Install missing plugins from ~/.zshrc? [y/n]: "
    while read -t 0.2 -n 1; do : ; done
	if read -q; then
	    echo; zplug install
	fi
fi
zplug load
EOF
)


install_packages(){
    # For regular packages
    #install_packages false false package1 package2 package3

    # For dependency packages
    #install_packages true false dep1 dep2 dep3

    # For Flatpak packages
    #install_packages false true flatpak1 flatpak2 flatpak3

    local is_dependency=$1
    local is_flatpak=$2
    shift 2
    local packages=("$@")
    local to_install=()
    local not_available=()

    # Pick the type of check_installed and check_available function to be used
    local install_cmd
    local check_installed
    local check_available

    if ! $is_flatpak; then
        check_installed="is_package_installed"
        check_available="is_package_available"
        install_cmd="sudo $PACKAGE_MANAGER install -y"
    else
        check_installed="is_flatpak_package_installed"
        check_available="is_flatpak_package_available"
        install_cmd="flatpak install -y flathub"
    fi


    # Check which packages need to be installed
    for package in "${packages[@]}"; do
        if ! $check_installed "$package"; then
            if $check_available "$package"; then
                to_install+=("$package")
            else
                not_available+=("$package")
            fi
        fi
    done

    # Report on unavailable packages
    if [[ ${#not_available[@]} -gt 0 ]]; then
        log_error "Packages not available: ${not_available[*]}"
        if $is_dependency; then
            echo -e "The following packages are not available: ${not_available[*]}. Manual check required. Exiting..."
            exit 1
        fi
    fi

    # If no packages to install, exit
    if [[ ${#to_install[@]} -eq 0 ]]; then
        return 0
    fi

    # Install packages
    echo "The following packages will be installed: ${to_install[*]}"
    if ! $is_dependency; then
        echo -e "${HIGHLIGHT}Press 'y/Y' (or wait $TIMEOUT seconds) to proceed; otherwise, press any other key to abort.${NC}"
        flush_input_buffer
        read -t "$TIMEOUT" -n 1 -r -p "Proceed? (y/Y or wait): " choice || choice='y'
        echo
        if [[ ! "$choice" =~ [yY] ]]; then
            log_info "The user skipped installing: ${to_install[*]}"
            return 0
        fi
    fi

    $install_cmd "${to_install[@]}"

    # Check which packages were actually installed
    local packages_installed=()
    local packages_failed=()

    for package in "${to_install[@]}"; do
        if $check_installed "$package"; then
            packages_installed+=("$package")
        else
            packages_failed+=("$package")
        fi
    done

    if [[ "${#packages_installed[@]}" -gt 0 ]]; then
        log_success "Installed packages: ${packages_installed[*]}"
    fi

    if [[ "${#packages_failed[@]}" -gt 0 ]]; then
        log_error "Failed to install packages: ${packages_failed[*]}"
        if $is_dependency; then
            echo -e "$ERROR Failed to install the following packages: ${packages_failed[*]}. Manual check required. Exiting..."
            exit 1
        fi
    fi
}


install_optional_packages() {
    echo
    echo "Installing optional packages..."
    
    # List of packages to install
    local packages=()

    case "$DISTRO" in
    "fedora")
        packages=("${FEDORA_PACKAGES[@]}")
        ;;
    "ubuntu")
        packages=("${UBUNTU_PACKAGES[@]}")
        ;;
    "debian")
        packages=("${DEBIAN_PACKAGES[@]}")
        if [[ -z "$WSL_DISTRO_NAME" ]]; then
            packages+=("${DEBIAN_NON_WSL_PACKAGES[@]}")
        fi
        ;;
    esac
    
    install_packages false false "${packages[@]}"
}


setup_terminal(){
    echo
    echo "Setting up terminal..."
    
    local dependencies=("zsh" "curl" "unzip" "git")
    install_packages true false "${dependencies[@]}"

    echo
    echo "Configuring zsh..."

    if [ -s $ZSHRC_PATH ]; then
        log_warning "The ~/.zshrc configuration already exists. Skipped modifying it."
        log_info "To overwrite the existing ~/.zshrc configuration, delete it and re-run the command."
    else
        echo -e "$zshrc_content" > $ZSHRC_PATH
        log_success "Added a default configuration to ~/.zshrc."
    fi
    
    echo
    echo "Adding zplug..."

    if [ -d ~/.zplug ]; then
        log_warning "The ~/.zplug directory already exists. Skipped downloading it."
        log_info "To overwrite the existing ~/.zplug directory, delete it and re-run the command."
    else
	    curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
        log_success "Downloaded Zplug."
    fi
    
    if grep -q "source ~/.zplug/init.zsh" ~/.zshrc; then
        log_warning "Zplug is already sourced in ~/.zshrc. Skipped adding it."
        log_info "If needed, verify any missing plugins in your ~/.zshrc file."
    else
        echo -e "\n$zplug_content" >> $ZSHRC_PATH
        log_success "Added the zplug configuration to ~/.zshrc."
    fi

    echo
    echo "Adding Nerd Fonts to the system fonts..."
    
    local font_name=""
    if [[ $DISTRO == "fedora" ]]; then
        font_name="cascadia-mono-nf-fonts"
    else
        font_name="fonts-cascadia-code"
    fi
    fonts_dir="/usr/share/fonts"
    font_path="$fonts_dir/$font_name"

    if [[ -n "$WSL_DISTRO_NAME" ]]; then
        log_warning "$font_name is not needed on WSL. Skipped downloading it."
    elif [ -d $font_path ]; then
        log_warning "The directory $font_path already exists. Skipped downloading it."
        log_info "To overwrite the existing directory at $font_path, delete it and re-run the command."
    else
        sudo $PACKAGE_MANAGER install $font_name -y
        # Update the font cache
        sudo fc-cache -f -v > /dev/null
        log_success "Added $font_name to the system's fonts."
        log_info "To use $font_name, set it in your terminal's Preferences under 'Custom Font'. In order to make the new fonts available reopen the terminal."
    fi

    echo
    echo "Setting the shell to zsh..."
    
    if [ -n "$SHELL" ] && [ "$SHELL" = "/usr/bin/zsh" ]; then
        log_warning "Zsh is already set as the default shell. Skipped setting it up."
    else
        # Do not prompt the user again for a password
        sudo chsh -s "$(which zsh)" "$USER"
        log_success "Changed the default shell to ZSH for the current user."
    fi
}


setup_neovim(){
    echo
    echo "Setting up neovim..."

    if is_package_installed "neovim"; then
        log_warning "Neovim is already installed. Skipped installing it."
    else
        local dependencies=()
        case "$DISTRO" in
        "fedora" | "ubuntu")
            dependencies=("git" "neovim")
            install_packages true false "${dependencies[@]}"
            ;;
        "debian")
            dependencies=(
                "git"
                "file"
                "ninja-build"
                "gettext"
                "cmake"
                "unzip"
                "curl"
                "build-essential"
            )
            install_packages true false "${dependencies[@]}"
            cd ~/ && git clone https://github.com/neovim/neovim
            cd neovim && git checkout stable
            make CMAKE_BUILD_TYPE=Release
            cd build && cpack -G DEB && sudo dpkg -i nvim-linux64.deb
            cd ~/ && rm -rf neovim
            log_success "Installed neovim (via manual build)."
            log_info "To remove the installed neovim, use: 'sudo $PACKAGE_MANAGER remove neovim'."
            ;;
        esac
    fi

    local kickstart_path="${XDG_CONFIG_HOME:-$HOME/.config}/nvim"

    if [ -d "$kickstart_path" ]; then
        log_warning "The directory ${kickstart_path} already exists. Skipped downloading it."
        log_info "To overwrite the existing directory at ${kickstart_path}, delete it and re-run the command."
        return 0
    fi

    # Kickstart nvim
    git clone https://github.com/nvim-lua/kickstart.nvim.git "${XDG_CONFIG_HOME:-$HOME/.config}"/nvim
    log_success "Added kickstart to the Neovim configuration folder."
}


setup_git(){
    echo
    echo "Setting up git..."

    local dependencies=("git")
    install_packages true false "${dependencies[@]}"

    # Check if user.name is configured
    git_name="$(git config --get user.name)"
    git_email="$(git config --get user.email)"

    if [[ -n "$git_name" || -n "$git_email" ]]; then
        log_warning "Git's user.name and user.email already exist. Skipped setting it up."
        return 0
    fi

    flush_input_buffer
    read -p "Enter the username for your github account: " username
    git config --global user.name "$username"

    flush_input_buffer
    read -p "Enter the email for your github account: " email
    git config --global user.email "$email"

    if ssh-keygen -t ed25519 -C "$email" -f ~/.ssh/id_ed25519 -N ""; then
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_ed25519
        log_success "Configured Git and generated SSH key."
        log_info "To connect to GitHub via SSH, follow the instructions at: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account."
    else
        log_warning "User cancelled SSH key generation for Git setup."
    fi
}


install_flatpak_packages() {
    echo
    echo "Installing flatpak packages..."

    if [[ -n "$WSL_DISTRO_NAME" ]]; then
        log_warning "There is no need to install Flatpak on WSL. Skipped installing it."
        return 0
    fi

    # Only run on Debian-based distributions
    if ! is_package_installed "flatpak"; then
        local dependencies=("flatpak" "gnome-software-plugin-flatpak")        
        
        install_packages true false "${dependencies[@]}"
        
        # Add flathub remote if not already added
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        
        # Inform the user about the required restart
        log_success "Installed Flatpak."
        log_info "To proceed with installing Flatpak packages, a restart will be required."
        is_restart_required=true
        return 0
    fi

    local to_install=()
    local not_available=()

    install_packages false true "${FLATPAK_PACKAGES[@]}"
}


set_faster_downloads_fedora(){
    echo
    echo "Configuring DNF for faster downloads..."
    
    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped configuring DNF for faster downloads."
        return 0
    fi

    # Check if the values are already present
    if grep -q "^max_parallel_downloads=10$" /etc/dnf/dnf.conf || grep -q "^fastestmirror=True$" /etc/dnf/dnf.conf; then
        log_warning "max_parallel_downloads or fastestmirror already present in /etc/dnf/dnf.conf. Skipped configuring DNF for faster downloads."
        return 0
    fi

    echo -e "max_parallel_downloads=10\nfastestmirror=True" | sudo tee -a /etc/dnf/dnf.conf > /dev/null
    is_restart_required=true

    log_success "Configured DNF for faster downloads."
}


enable_hw_acceleration_fedora(){
    echo
    echo "Enabling system and Firefox hardware acceleration support..."
	
    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped enabling system and Firefox hardware acceleration support."
        return 0
    fi

    echo
    echo "Installing non free media codecs..."

	# https://rpmfusion.org/Configuration
	# Installing Free and Nonfree Repositories
	sudo dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
	
    # On Fedora, we default to use the openh264 library
	sudo dnf-3 config-manager --enable fedora-cisco-openh264
    # https://fedoraproject.org/wiki/OpenH264
	# enable OpenH264 on Firefox
	sudo dnf install -y mozilla-openh264

	# RPM Fusion repositories also provide Appstream metadata to enable users to install # packages using Gnome Software/KDE Discover
	sudo dnf update -y @core
	
	# https://rpmfusion.org/Howto/Multimedia#Hardware_codecs_with_AMD_.28mesa.29
	# Switch to full ffmpeg
	sudo dnf swap -y ffmpeg-free ffmpeg --allowerasing

	# Install additional codecs
	sudo dnf update -y @multimedia --setopt="install_weak_deps=False" --exclude=PackageKit-gstreamer-plugin
	# In the documentation it is used the first cmd but it fails due to non existing sound-and-video group
	sudo dnf update -y @sound-and-video &> /dev/null || sudo dnf install -y @sound-and-video

	if grep -q AuthenticAMD /proc/cpuinfo; then
        sudo dnf swap -y mesa-va-drivers mesa-va-drivers-freeworld
        sudo dnf swap -y mesa-vdpau-drivers mesa-vdpau-drivers-freeworld
	elif grep -q GenuineIntel /proc/cpuinfo; then
        sudo dnf install -y intel-media-driver
	else
        log_warning "Current machine is not based on AMD or Intel. Skipped installing additional media codecs."
        return 0
	fi

	# Make available vainfo
	sudo dnf install -y libva-utils

    log_success "Made non-free media codecs available."

    echo
    echo "Enabling Firefox hardware acceleration..."

    #To enable hardware acceleration on Firefox (optional but highly advised) you should: Make sure to enable it on Settings->Performance or just set gfx.webrender.all to true. Enable OpenH264 Video Codec add-on (from Cisco) on Settings->Add-ons & Themes->Plugins. In about:config (type it in the search bar) set the following fields to true: media.ffmpeg.vaapi.enabled, gfx.webrender.all (if you enabled HW on settings there is no need here), media.gmp-gmpopenh264.autoupdate, media.gmp-gmpopenh264.enabled, media.gmp-gmpopenh264.provider.enabled. You can use 'vainfo' to check for AV1 hardware support. Typically, YouTube enforces this format without considering your system's compatibility, which may lead to increased battery usage. If your system doesn't support AV1, set media.av1.enabled to false. However, keep in mind that if the source stream is exclusively in AV1 format (rarely), you won't be able to play the video unless you change this setting back to true. Feel free to ask if you need further assistance!

    local policy_dir="/etc/firefox/policies"
    local policy_file="$policy_dir/policies.json"

    # Create policies directory if missing
    sudo mkdir -p "$policy_dir"

    # Backup existing policies.json if present
    if [ -s "$policy_file" ]; then
        policy_backup="$policy_file.backup_$(date +%Y%m%d_%H%M%S)"
        sudo cp "$policy_file" "$policy_backup"
        log_info "Existing Firefox policy file backed up to $policy_backup."
    fi

    # Determine AV1 support
    local av1_enabled="true"
    if ! vainfo 2>/dev/null | grep -q "AV1"; then
        av1_enabled="false"
    fi

    # Construct the policies.json content directly
    local policy_json=$(cat <<-EOF
{
  "policies": {
    "Preferences": {
      "gfx.webrender.all": true,
      "media.ffmpeg.vaapi.enabled": true,
      "media.gmp-gmpopenh264.autoupdate": true,
      "media.gmp-gmpopenh264.enabled": true,
      "media.gmp-gmpopenh264.provider.enabled": true,
      "media.av1.enabled": $av1_enabled
    }
  }
}
EOF
)
    # Write JSON content to policies.json with sudo tee
    echo "$policy_json" | sudo tee "$policy_file" > /dev/null
    log_success "Enabled Firefox hardware acceleration."
    log_info "Check Firefox's currently enforced options and flags in the policy file $policy_file."
}


set_governor_to_performance_fedora(){
    echo
    echo "Setting the governor mode to performance..."
    
    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped setting the governor mode to performance."
        return 0
    fi

    # Check if the governor is already in performance mode and skip
    # the service creation
    governor=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor) 

    if [ "$governor" = "performance" ]; then
        log_warning "The governor mode is already set to 'performance'. No need to create a startup service for it. Skipped setting it up."
        return 0
    fi
    
    local script_name="change_governor.sh"
    local script_dir="$HOME/.startup_scripts"
    local script_path="$script_dir/$script_name"
    local script_content=$(cat <<- 'EOF'
#!/usr/bin/bash
echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
EOF
)

    local service_name="change_governor.service"
    local service_dir="/etc/systemd/system"
    local service_path="$service_dir/$service_name"
    local service_content=$(envsubst <<- EOF
[Unit]
Description=Change governor to performance

[Service]
ExecStart=/usr/bin/bash $script_path
User=root
Group=root
Type=simple
RemainAfterExit=no

[Install]
WantedBy=multi-user.target
EOF
)

    if [ -s "$script_path" ]; then
        log_warning "The $script_name already exists in $script_dir. Skipped creating it."
        return 0
    fi

    mkdir "$script_dir" && touch "$script_path"
    echo "$script_content" > "$script_path"
    sudo chmod +x "$script_path"

    if [ -s "$service_path" ]; then
        log_warning "The $service_name already exists in $service_dir. Skipped creating it."
        log_info "To troubleshoot the status of the service $service_name, run: sudo systemctl status $service_name."
        return 0
    fi

    sudo touch "$service_path"
    echo "$service_content" | sudo tee "$service_path" > /dev/null
    sudo chmod +x "$service_path"

    sudo systemctl daemon-reload > /dev/null
    sudo systemctl enable "$service_name" > /dev/null
    sudo systemctl start "$service_name" > /dev/null
    is_restart_required=true

    log_success "Set governor mode to performance."
}


set_yaru_icons_fedora(){
    echo
    echo "Setting Yaru icons... "

    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped setting Yaru icons."
        return 0
    fi

    current_icon_theme=$(gsettings get org.gnome.desktop.interface icon-theme)

    local icon_theme='Yaru-prussiangreen-dark'
    if [[ "$current_icon_theme" == *Yaru* ]]; then
        log_warning "The $current_icon_theme icons are already enabled. Skipped setting it up."
        return 0
    fi

    local dependencies=("yaru-theme") 
    install_packages true false "${dependencies[@]}"

    #gsettings set org.gnome.desktop.interface gtk-theme 'Yaru-prussiangreen-dark'
    #gsettings set org.gnome.desktop.wm.preferences theme 'Yaru'
    gsettings set org.gnome.desktop.interface icon-theme "$icon_theme"

    log_success "Set yaru icons theme."
}


disable_ppd_color_change_fedora(){
    # Laptops with integrated Radeon graphics have a dedicated hardware function
    # to decrease panel power consumption in exchange for color accuracy. This
    # function is used when the system is on battery and the user has selected
    # the "balanced" or "power-saver" profiles.
    # Read current val with cat /sys/module/amdgpu/parameters/abmlevel
    # -1 for 'auto' (let PPD decide)
    # 0 for 'AC' and 'performance' (full brightness)
    # 1 for 'balanced' (good balance and got better battery consuption than with 2, weird)
    # 3 for 'power save' (way to aggresive with colors)
    # 4 (I won't even try)
    # "https://www.kernel.org/doc/html/v5.10/gpu/amdgpu.html"
    # "https://gitlab.freedesktop.org/3v1n0/power-profiles-daemon"
    echo
    echo "Disabling gnome power-profile-daemon (PPD) color change... "


    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution: $DISTRO is not Fedora. Skipped disabling gnome power-profile-daemon (PPD) color change."
        return 0
    fi

    if ! grep -q AuthenticAMD /proc/cpuinfo; then
        log_warning "Current machine is not AMD based. Skipped disabling GNOME power-profile-daemon (PPD) color change."
        return 0
    fi

    # File path
    GRUB_FILE="/etc/default/grub"

    if grep -q "amdgpu.abmlevel" "$GRUB_FILE"; then
        log_warning "The setting 'amdgpu.abmlevel' already exists in '$GRUB_FILE'. Skipped modifying it."
        log_info "Verify the value of 'amdgpu.abmlevel' in '$GRUB_FILE' and change it to 0 to disable automatic brightness management (ABM) and prevent PPD from modifying colors."
        return 0
    fi

    sudo sed -i '/GRUB_CMDLINE_LINUX/s/"\(.*\)"/"\1 amdgpu.abmlevel=0"/' "$GRUB_FILE"
    if [ $? -eq 0 ]; then
        sudo grub2-mkconfig -o /boot/grub2/grub.cfg
        is_restart_required=true
        log_success "Disabled gnome power-profile-daemon (PPD) color change."
    fi
}

setup_samba_share_fedora(){
    echo
    echo "Setting up a local network share with samba... "

    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution: $DISTRO is not Fedora. Skipped setting up a local network share with samba."
        return 0
    fi

    # https://docs.fedoraproject.org/en-US/quick-docs/samba/
    local dependencies=("samba") 
    install_packages true false "${dependencies[@]}"

    sudo systemctl enable smb --now
    firewall-cmd --get-active-zones
    sudo firewall-cmd --permanent --zone=FedoraWorkstation --add-service=samba
    sudo firewall-cmd --reload

    if ! sudo pdbedit -L | grep -q "^$USER:"; then
        sudo smbpasswd -a "$USER"
    fi
    
    local conf_path="/etc/samba/smb.conf"

    # Check for following links in [global] settings
    if ! grep -q "allow insecure wide links" "$conf_path"; then
        flush_input_buffer
        read -p "Do you want to allow insecure wide links in [global]? (y/n): " allow_insecure
        if [[ "$allow_insecure" =~ ^[Yy]$ ]]; then
            sudo sed -i "/^\[global\]/a \\\tallow insecure wide links = yes" "$conf_path"
            log_warning "Enabled global samba access to insecure wide links."
        fi
    fi

    # Check for NTFS access
    if ! getsebool samba_share_fusefs | grep -q 'on'; then
        flush_input_buffer
        read -p "Do you want to allow samba to access to NTFS filesystems? (y/n): " allow_ntfs
        if [[ "$allow_ntfs" =~ ^[Yy]$ ]]; then
            if ! getsebool samba_share_fusefs | grep -q 'on'; then
                sudo setsebool -P samba_share_fusefs 1
                log_warning "Enabled samba access to NTFS filesystems."
            fi
        fi
    fi

    # Set a default folder path
    DEFAULT_FOLDER="/home/$USER/Shared"

    # Prompt for the full path of the folder to share and read input
    flush_input_buffer
    read -p "Enter the full path of the folder to be shared (default: $DEFAULT_FOLDER): " FOLDER_PATH
        
    # Remove surrounding quotes and trailing slashes
    FOLDER_PATH=${FOLDER_PATH#\"}
    FOLDER_PATH=${FOLDER_PATH%\"}
    FOLDER_PATH=${FOLDER_PATH%/}

    if [[ -z "$FOLDER_PATH" ]]; then
        echo "No folder path entered. Using default: $DEFAULT_FOLDER"
        FOLDER_PATH="$DEFAULT_FOLDER"
    elif [[ "$FOLDER_PATH" != /* ]]; then
        echo "Provided path is not absolute. Creating folder in home directory."
        FOLDER_PATH="$HOME/$FOLDER_PATH"
    fi

    FOLDER_NAME=$(basename "$FOLDER_PATH")
    
    # Check if the folder exists; if not, create it
    if [ ! -d "$FOLDER_PATH" ]; then
        mkdir -p "$FOLDER_PATH"
        log_info "Directory '$FOLDER_PATH' didn't exist. Created it."
    fi
    
    if sudo semanage fcontext --list --locallist --noheading | grep -q "$FOLDER_PATH(/.*)?"; then
        log_info "SELinux context already exists for $FOLDER_PATH. No changes made to smb.conf."
        return 0
    fi


    # Prompt for reading/writing permissions
    flush_input_buffer
    read -p "Do you want to allow writting permissions on this share? (y/n): " allow_writes
    local read_only="\tread only = yes"
    if [[ "$allow_writes" =~ ^[Yy]$ ]]; then
        read_only="\tread only = no"
        log_warning "Writting permissions were granted for $FOLDER_PATH."
    fi
    
    # Prompt for following links
    flush_input_buffer
    read -p "Do you want to allow following symbolic links on this share? (y/n): " follow_links
    local follow_symlinks="\twide links = no"
    if [[ "$follow_links" =~ ^[Yy]$ ]]; then
        follow_symlinks="\twide links = yes"
        log_warning "Access to symbolic links was granted for $FOLDER_PATH."
    fi

    local conf_content=$(envsubst <<- EOF

## Added by user $USER on $(date +"%Y-%m-%d")
[$FOLDER_NAME]
\tcomment = Shared folder by $USER
\tpath = $FOLDER_PATH
\tpublic = no
\tguest ok = no
\tbrowseable = yes
$read_only
$follow_symlinks
EOF
)

    sudo semanage fcontext --add --type "samba_share_t" "$FOLDER_PATH(/.*)?"
    # To remove use
    #sudo semanage fcontext -d "$FOLDER_PATH(/.*)?"

    sudo restorecon -R $FOLDER_PATH

    # Create a timestamped backup
    BACKUP_DIR="/etc/samba/backups"
    sudo mkdir -p "$BACKUP_DIR"
    timestamp=$(date +"%Y%m%d_%H%M%S")
    sudo cp "$conf_path" "$BACKUP_DIR/smb.conf.bak.$timestamp"
    log_info "Backup of '$conf_path' created as '$BACKUP_DIR/smb.conf.bak.$timestamp."

    echo -e "$conf_content" | sudo tee -a "$conf_path" > /dev/null

    sudo systemctl restart smb

    log_success "Set up $FOLDER_PATH to be shared on the local network."
    log_info "To review the folders set in SELinux Policy Management, use: 'sudo semanage fcontext --list --locallist --noheading'"
    log_info "To change any sharing permissions modify the $conf_path accordingly. Use 'testparm' after modying the $conf_path to check its integrity."
}

install_cloudflare_warp_fedora(){
    echo
    echo "Installing cloudfare warp... "

    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped installing Cloudflare Warp."
        return 0
    fi

    if is_package_installed cloudflare-warp; then
        log_warning "Claudflare Warp is already installed. Skipped installing it."
        return 0
    fi

    # Add repository
    sudo dnf-3 config-manager --add-repo https://pkg.cloudflareclient.com/cloudflare-warp-ascii.repo

    sudo dnf makecache -y
    sudo dnf install -y cloudflare-warp

    local resolved_path="/etc/systemd/resolved.conf"
    
    local resolved_content=$(cat <<- 'EOF'
[Resolve]
ResolveUnicastSingleLabel=yes
EOF
)
    if [ -s "$resolved_path" ]; then
        log_warning "While installing cloudflare warp, it was found that the file $resolved_path had an existing configuration. Skipped creating it."
        return 0
    fi

    echo "$resolved_content" | sudo tee "$resolved_path" > /dev/null

    sudo systemctl restart systemd-resolved.service
    
    # Register a new session with cloudflare warp and accept terms and conditions
    echo y | sudo warp-cli registration new


    # Add WARP aliases to .zshrc if it exists
    if [ -f "$ZSHRC_PATH" ]; then
        if ! grep -q "# WARP aliases" "$ZSHRC_PATH"; then
            # Append after the line matching "# General aliases"
            sed -i "/# General aliases/a\\
# WARP aliases\\
alias warpc='warp-cli connect'\\
alias warpd='warp-cli disconnect'\\
alias warps='warp-cli status'" "$ZSHRC_PATH"
            log_success "Added WARP aliases to .zshrc"
        else
            log_warning "WARP aliases already exist in .zshrc. Skipped adding them."
        fi
        log_info "Use warpc/warpd/warps for quick connecting/disconnecting/status"
    fi
    
    log_success "Cloudflare Warp has been installed."
    log_info "Use 'warp-cli --help' for more information."
}

install_docker_desktop_fedora(){
    echo
    echo "Installing Docker Desktop... "

    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped installing Docker Desktop."
        return 0
    fi


    if is_package_installed docker-desktop; then
        log_warning "Docker Desktop is already installed. Skipped installing it."
        return 0
    fi
    
    # Add repository

    sudo dnf -y install dnf-plugins-core
    # if ! dnf repolist | grep -q docker-ce-stable; then
    sudo dnf-3 config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
    # fi

    echo "Downloading Docker Desktop"
    curl -L -o "https://desktop.docker.com/linux/main/amd64/docker-desktop-x86_64.rpm?utm_source=docker&utm_medium=webreferral&utm_campaign=docs-driven-download-linux-amd64"

    sudo dnf install -y ./docker-desktop-x86_64.rpm
    rm -f ./docker-desktop-x86_64.rpm

    log_success "Docker Desktop successfully installed."
}

ensure_running_conditions(){
    supported_distros=("fedora" "debian" "ubuntu")
    found_distro=false
    if [[ ! " ${supported_distros[@]} " =~ " ${DISTRO} " ]]; then
        log_error "The current Linux distribution is not supported. This script is only intended for running on ${supported_distros[@]}."
        echo -e "$ERROR The current Linux distribution is not supported. This script is only intended for running on ${supported_distros[@]}. Exiting..."
        exit 1
    fi

    if [[ -z "$WSL_DISTRO_NAME" && "$XDG_CURRENT_DESKTOP" != *GNOME* ]];  then
        log_error "The current Desktop Environment is not supported. This script is only intended for running on GNOME."
        echo -e "$ERROR The current Desktop Environment is not supported. This script is only intended for running on GNOME. Exiting..."
        exit 1
    fi


    # Select package manager and update its cache
    echo "Updating system's package manager cache..."

    case "$DISTRO" in
    "fedora")
        PACKAGE_MANAGER="dnf"
        sudo dnf makecache -y
        ;;
    "debian" | "ubuntu")
        PACKAGE_MANAGER="apt"
        sudo apt update -y
        ;;
    esac
}


ask_user_confirmation() {
    local prompt="$1"
    local response

    flush_input_buffer
    read -p "$prompt (y/n): " response
    case $response in
        [Yy]* ) return 0;;
        [Nn]* ) return 1;;
        * ) echo "Invalid response. Please answer y/Y or n/N."; return 1;;
    esac
}


count_log_file_lines() {
    if [[ -f "$LOG_FILE" ]]; then
        wc -l < "$LOG_FILE"
    else
        echo 0
    fi
}


main(){
    clear
    ensure_running_conditions
    clear

    while true; do
        INITIAL_LINES="$(count_log_file_lines)"
        echo "--------------------------- Setup Options ---------------------------"
        echo "0- Quick setup"
        echo "   • Options: 1, 2, 3, 4, 6, 11"
        echo "1- Minimal system setup"
        echo "   • Install optional packages"
        echo "   • Set up Zsh with plugins (syntax highlighting, autosuggestions, etc.)"
        echo "   • Install Caskaydia Nerd Font"
        echo "   • Install and configure Neovim with kickstart"
        echo "2- Install Flatpak packages"
        echo "3- Set up Git (install, configure, generate SSH key)"
        echo "-------------------------- Fedora Important --------------------------"
        echo "4- Enable system's and Firefox hardware acceleration support"
        echo "   • Install non-free media codecs (h.264, etc.)"
        echo "   • Enable system-wide and Firefox's hardware acceleration support"
        echo "-------------------------- Fedora Optional --------------------------"
        echo "5- Configure DNF for faster downloads (Not recommended; proceed if you know what you are doing!)"
        echo "6- Install Cloudflare WARP (VPN-like service)"
        echo "7- Disable GNOME power-profile-daemon color change (AMD-based; proceed if you know what you are doing!)"
        echo "8- Set Yaru icon theme"
        echo "9- Set governor mode to performance permanently (Not recommended; proceed if you know what you are doing!)"
        echo -e "10- Setup a local network share with samba ($HOME/Shared by default)"
        echo "11- Install Docker Desktop"
        echo "q- Quit"
        echo "--------------------------------------------------------------------"
        echo "Note: All options will only be applied if not already set/configured."

        flush_input_buffer
        read -p "Enter the option/s you would like to perform (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 or q): " selection
        case "$selection" in
            0)
                if ! ask_user_confirmation "You selected a quick setup. Would you like to proceed?"; then
                    continue
                fi
                install_optional_packages
                setup_terminal
                setup_neovim
                install_flatpak_packages
                enable_hw_acceleration_fedora
                install_cloudflare_warp_fedora
                install_docker_desktop_fedora
                setup_git
                ;;
            1)
                if ! ask_user_confirmation "You selected to perform a minimal system setup. Would you like to proceed?"; then
                    continue
                fi
                install_optional_packages
                setup_terminal
                setup_neovim
                ;;
            2)
                if ! ask_user_confirmation "You selected to install the flatpak packages. Would you like to proceed?"; then
                    continue
                fi
                install_flatpak_packages
                ;;  
            3)
                if ! ask_user_confirmation "You selected to set up git. Would you like to proceed?"; then
                    continue
                fi
                setup_git
                ;;
            4)
                if ! ask_user_confirmation "You selected to enable system's and Firefox hardware acceleration support. Would you like to proceed?"; then
                    continue
                fi
                enable_hw_acceleration_fedora
                ;;            
            5)
                if ! ask_user_confirmation "You selected to configure the DNF for faster downloads. Would you like to proceed?"; then
                    continue
                fi
                set_faster_downloads_fedora
                ;;
            6)
                if ! ask_user_confirmation "You selected to install cloudflare warp. Would you like to proceed?"; then
                    continue
                fi
                install_cloudflare_warp_fedora
                ;;
            7)
                if ! ask_user_confirmation "You selected to disable GNOME power-profile-daemon color change. Would you like to proceed?"; then
                    continue
                fi
                disable_ppd_color_change_fedora
                ;;
            8)
                if ! ask_user_confirmation "You selected to set yaru icons theme. Would you like to proceed?"; then
                    continue
                fi
                set_yaru_icons_fedora
                ;;
            9)
                if ! ask_user_confirmation "You selected to set the power mode to performance permanently. Would you like to proceed?"; then
                    continue
                fi
                set_governor_to_performance_fedora
                ;;
            10)
                if ! ask_user_confirmation "You selected to setup a local network share with samba. Would you like to proceed?"; then
                    continue
                fi
                setup_samba_share_fedora
                ;;
            11) 
                if ! ask_user_confirmation "You selected to install Docker Desktop. Would you like to proceed?"; then
                    continue
                fi
                install_docker_desktop_fedora
                ;;
            q)
                echo "Exited." && exit 0
                ;;
            *)
                echo
                continue
                ;;
        esac
        
        # Check if the log file exists and is not empty
        if [[ -f "$LOG_FILE" && -s "$LOG_FILE" ]]; then
            new_logs=$(tail -n +$((INITIAL_LINES + 1)) "$LOG_FILE")
        fi
        
        if [[ -n $new_logs ]]; then
            echo -e "\n-------------------------- Log Summary ----------------------------"
            # Get new logs starting from the line after INITIAL_LINES
            new_logs=$(tail -n +$((INITIAL_LINES + 1)) "$LOG_FILE")
            # Display grouped logs
            #echo -e "\n--- Success Logs ---"
            echo "$new_logs" | grep -i "success" && echo 

            #echo -e "\n--- Informational Logs ---"
            echo "$new_logs" | grep -i "info" && echo 

            #echo -e "\n--- Warning Logs ---"
            echo "$new_logs" | grep -i "warning" && echo 

            #echo -e "\n--- Error Logs ---"
            echo "$new_logs" | grep -i "error" && echo 
            echo "--------------------------------------------------------------------"
        fi

        if "$is_restart_required"; then
            echo -e "Some changes need a system restart to take effect. Please RESTART your system to finish."
        fi

        flush_input_buffer
        read -p "Press Enter to continue..."
    done
}

main
