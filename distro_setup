#!/bin/bash
#
# Automate the setup process of a linux DISTRO clean install

BOLD_MAGENTA='\e[1;35m'
NC='\e[0m'
ERROR="\e[31m[ERROR]\e[0m"
TIMEOUT=10

FEDORA_PACKAGES=(
    "python3-pip"
    "btop"
    "nvtop"
    "powertop"
    "gnome-tweaks"
    "gnome-shell-extension-dash-to-dock"
    "gnome-shell-extension-appindicator"
    "gnome-pomodoro"
    "gnome-shell-extension-caffeine"
)

UBUNTU_PACKAGES=(
    "python3-pip"
    "gnome-tweaks"
    "gnome-shell-pomodoro"
    "caffeine"
)

DEBIAN_PACKAGES=(
    "python3"
    "python3-pip"
)

ADDITIONAL_DEBIAN_NON_WSL_PACKAGES=(
    "gnome-tweaks"
    "gnome-shell-extension-appindicator"
    "gnome-shell-pomodoro"
    "gnome-shell-extension-caffeine"
)

FLATPAK_PACKAGES=(
    "com.mattjakeman.ExtensionManager"
    "com.github.tchx84.Flatseal"
    "io.github.peazip.PeaZip"
    "org.qbittorrent.qBittorrent"
    "com.github.johnfactotum.Foliate"
    "app.drey.Warp"
    "org.videolan.VLC"
    "com.github.unrud.VideoDownloader" 
    "com.opera.Opera"
    "md.obsidian.Obsidian"
    "com.rafaelmardojai.Blanket"
)

# Determine the distribution
DISTRO=$(. /etc/os-release && echo "$ID")

# Global variables
package_manager=""
suggest_restart=false

LOG_FILE="script_logs.txt"

# Logging functions with timestamps
log_info() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') \e[35m[INFO]\e[0m $1" >> "$LOG_FILE"
}

log_warning() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') \e[93m[WARNING]\e[0m $1" >> "$LOG_FILE"
}

log_error() {
    #echo -e "\e[31m[ERROR]\e[0m $1"
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') \e[31m[ERROR]\e[0m $1" >> "$LOG_FILE"
}

log_success() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') \e[32m[SUCCESS]\e[0m $1" >> "$LOG_FILE"
}

# Check if a package is installed
is_package_installed() {
    local package=$1
    case "$DISTRO" in
        "fedora")
            rpm -q "$package" &> /dev/null
            ;;
        "debian" | "ubuntu")
            dpkg -s "$package" &> /dev/null
            ;;
    esac
}


# Check if a package is available to install
is_package_available() {
    local package=$1
    case "$DISTRO" in
        "fedora")
            # avoid the package manager to halt with repo related prompts
            dnf info "$package" &> /dev/null
            ;;
        "debian" | "ubuntu")
            apt-cache show "$package" &> /dev/null
            ;;
    esac
}


# Check if a flatpak package is installed
is_flatpak_package_installed() {
    local package=$1
    flatpak list --app --columns=application | grep -q "^$package$" &> /dev/null
}


# Check if a flatpak package is available
is_flatpak_package_available() {
    local package=$1
    flatpak remote-info --cached flathub "$package" &> /dev/null
}


# Function to populate the .zshrc file
add_config_to_zshrc() {
    local zshrc_path="$HOME/.zshrc"
    local zshrc_content=$(cat <<- 'EOF'

# Set vim keybindings
bindkey -v

# Do not keep history duplicates
setopt histignorealldups sharehistory

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=5000
SAVEHIST=5000
HISTFILE=~/.zsh_history

# General aliases
alias ls='ls --color=auto'
alias ll='ls -lah --color=auto'
alias grep='grep --color=auto'
alias cperf='echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'
alias vperf='cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor'
alias vbat='sudo powertop --time=10'
EOF
)
    echo "$zshrc_content" > "$zshrc_path"
}


add_zplug_to_zshrc() {
    local zshrc_path="$HOME/.zshrc"
    local zplug_content=$(cat <<- 'EOF'
source ~/.zplug/init.zsh
#zplug "plugins/git", from:oh-my-zsh
#zplug "plugins/sudo", from:oh-my-zsh
#zplug "plugins/command-not-found", from:oh-my-zsh
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-history-substring-search"
zplug "romkatv/powerlevel10k, as:theme, depth:1"
#zplug "zsh-users/zsh-completions"
#zplug "junegunn/fzf"
#zplug "themes/robbyrussell", from:oh-my-zsh, as:theme   # Theme

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down


# zplug - install/load new plugins when zsh is started or reloaded
if ! zplug check; then
    echo -e "Install missing plugins from ~/.zshrc? [y/n]: "
	if read -q; then
	    echo; zplug install
	fi
fi
zplug load
EOF
)
    echo "$zplug_content" >> "$zshrc_path"
}


install_packages(){
    #############################
    #############################
    # Install system packages or dependencies based on the configured package manager.
    # This function checks if packages are installed and available, prompts the user
    # for confirmation, and installs the required packages using the system's package manager.
    #
    # Globals:
    #   package_manager: str (The package manager to be used for installation)
    #
    # Arguments:
    #   is_dependency: boolean (Flag to indicate if the packages are dependencies)
    #   packages: list (List of packages to be installed)
    #
    # Returns:
    #   None
    #############################

    local is_dependency=$1
    shift
    local packages=("$@")
    local to_install=()


    # Check for availability, do not add to the list if it is already installed
    for package in "${packages[@]}"; do
        if ! is_package_available "$package"; then
            if $is_dependency; then
                log_error "Package $package not found. Please check manually."
                echo -e "$ERROR Package $package not found. Please check manually. Exiting..."
                exit 1
            else
                log_warning "Skipped $package: package not found."
            fi
        elif ! is_package_installed "$package"; then
            to_install+=("$package")
        fi
    done

    if [[ "${#to_install[@]}" -gt 0 ]]; then
        if $is_dependency; then
            # The for loop is needed to know which dependency fails to install if any
            for package in "${to_install[@]}"; do
                sudo $package_manager install -y "$package" #> /dev/null
                if [ $? -ne 0 ]; then
                    log_error "Failed to install $package. Please check manually."
                    echo -e "$ERROR Failed to install $package. Please check manually. Exiting..."
                    exit 1
                fi
            done
            # Check the status code of the installation command
            log_success "Installed packages: ${to_install[*]}"
        else
            echo "The following packages will be installed: ${to_install[*]}"
            echo -e "${BOLD_MAGENTA}Press 'y/Y' (or wait $TIMEOUT seconds) to proceed; otherwise, press any other key to abort.${NC}"
            read -t "$TIMEOUT" -n 1 -r -p "Proceed? (y/Y or wait): " choice || choice='y'

            if [[ "$choice" =~ [yY] ]]; then
                echo
                sudo $package_manager install -y "${to_install[@]}" #> /dev/null
                # Check the status code of the installation command
                log_success "Installed packages: ${to_install[*]}"
            else
                log_warning "Skipped installing: ${to_install[*]}"
            fi
        fi
    fi
}


install_additional_packages() {
    # List of packages to install
    local packages=()

    echo
    echo "Installing additional packages..."
    
    case "$DISTRO" in
    "fedora")
        packages=("${FEDORA_PACKAGES[@]}")
        ;;
    "ubuntu")
        packages=("${UBUNTU_PACKAGES[@]}")
        ;;
    "debian")
        packages=("${DEBIAN_PACKAGES[@]}")
        if [[ -z "$WSL_DISTRO_NAME" ]]; then
            packages+=("${ADDITIONAL_DEBIAN_NON_WSL_PACKAGES[@]}")
        fi
        ;;
    esac
    
    install_packages false "${packages[@]}"
}


configure_zsh(){
    echo
    echo "Configuring zsh..."

    if [ -s ~/.zshrc ]; then
        log_warning "The ~/.zshrc configuration exists. Action skipped. Delete it to overwrite and re-run."
        return 0
    fi
    add_config_to_zshrc
    log_success "Added default configuration to ~/.zhsrc"
}
    

add_zplug(){
    echo
    echo "Adding zplug..."

    if [ -d ~/.zplug ]; then
        log_warning "The ~/.zplug directory exists. Action skipped. Delete it to overwrite and re-run."
    else
	    curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
        log_success "Downloaded Zplug."
    fi
    
    if grep -q "source ~/.zplug/init.zsh" ~/.zshrc; then
        log_warning "zplug is already sourced in ~/.zshrc. Action skipped. Verify missing plugins in ~/.zshrc if needed."
    else
        add_zplug_to_zshrc
        log_success "Added zplug configuration to ~/.zhsrc."
    fi
}

add_nerd_fonts(){
    echo
    echo "Adding Caskaydia Nerd Font to the system fonts..."
    
    font_name="CascadiaMono"
    fonts_dir="/usr/share/fonts"
    font_path="$fonts_dir/$font_name"

    if [[ -n "$WSL_DISTRO_NAME" ]]; then
        log_warning "Caskaydia Nerd Font is not needed on WSL. Action skipped."
        return 0
    fi

    if [ -d $font_path ]; then
        log_warning "The directory $font_path exists. Action skipped. Delete it to overwrite and re-run."
        return 0
    fi

    # Download the latest Caskaydia Nerd Font
    curl -L -s -o ~/$font_name.zip $(curl -s https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest | grep "browser_download_url.*$font_name.zip" | cut -d '"' -f 4)
    sudo unzip ~/$font_name.zip '*.ttf' -d "$font_path" > /dev/null
    rm ~/$font_name.zip
    # Update the font cache
    sudo fc-cache -f -v > /dev/null
    log_success "Added Caskaydia Nerd Font to system's fonts. Set it in your terminal's Preferences under 'Custom Font' as 'CaskaydiaMono Nerd Font Mono'"
}


set_shell_to_zsh(){
    echo
    echo "Setting the shell to zsh..."
    
    if [ -n "$SHELL" ] && [ "$SHELL" = "/usr/bin/zsh" ]; then
        log_warning "zsh is already the default shell. Action skipped."
        return 0
    fi

    # Do not prompt the user again for a password
    sudo chsh -s "$(which zsh)" "$USER"
    suggest_restart=true
    log_success "Changed default shell to ZSH for the current user."
}


setup_terminal(){
    echo
    echo "Setting up terminal..."
    
    local dependencies=("zsh" "curl" "unzip" "git")
    install_packages true "${dependencies[@]}"

    configure_zsh
    add_zplug
    add_nerd_fonts
    set_shell_to_zsh
}


install_neovim(){
    echo
    echo "Installing neovim..."

    if is_package_installed "neovim"; then
        log_warning "Neovim is already installed. Action skipped."
        return 0
    fi

    local dependencies=()
    case "$DISTRO" in
    "fedora" | "ubuntu")
        dependencies=("git" "neovim")
        install_packages true "${dependencies[@]}"
        ;;
    "debian")
        dependencies=(
            "git"
            "file"
            "ninja-build"
            "gettext"
            "cmake"
            "unzip"
            "curl"
            "build-essential"
        )
        install_packages true "${dependencies[@]}"
        cd ~/ && git clone https://github.com/neovim/neovim
        cd neovim && git checkout stable
        make CMAKE_BUILD_TYPE=Release
        cd build && cpack -G DEB && sudo dpkg -i nvim-linux64.deb
        cd ~/ && rm -rf neovim
        log_success "Installed neovim (via manual build). To remove it, use: 'sudo apt purge neovim'."
        ;;
    esac
}

add_kickstart_neovim(){
    echo
    echo "Adding kickstart neovim..."
    
    local kickstart_path="${XDG_CONFIG_HOME:-$HOME/.config}/nvim"

    if [ -d "$kickstart_path" ]; then
        log_warning "The directory ${kickstart_path} already exists. Action skipped. Delete it to overwrite and re-run."
        return 0
    fi

    # Kickstart nvim
    git clone https://github.com/nvim-lua/kickstart.nvim.git "${XDG_CONFIG_HOME:-$HOME/.config}"/nvim
    log_success "Added kickstart to Neovim configuration folder."
}


setup_neovim(){
    echo
    echo "Setting up neovim..."

    install_neovim
    add_kickstart_neovim
}


setup_git(){
    echo
    echo "Setting up git..."

    local dependencies=("git")
    install_packages true "${dependencies[@]}"

    # Check if user.name is configured
    git_name="$(git config --get user.name)"
    git_email="$(git config --get user.email)"

    if [[ -n "$git_name" || -n "$git_email" ]]; then
        log_warning "Skipped setting up Git due to existing values. Manual check required."
        return 0
    fi

    read -p "Enter the username for your github account: " username
    git config --global user.name "$username"

    read -p "Enter the email for your github account: " email
    git config --global user.email "$email"

    if ssh-keygen -t ed25519 -C "$email" -f ~/.ssh/id_ed25519 -N ""; then
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_ed25519
        log_success "Configured Git and generated SSH key. To connect to GitHub via SSH, follow the instructions at: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account"
    else
        log_warning "User cancelled SSH key generation for Git setup. Manual check required."
    fi
}


install_flatpak_packages() {
    echo
    echo "Installing flatpak packages..."

    if [[ -n "$WSL_DISTRO_NAME" ]]; then
        log_warning "There is no need to install Flatpak on WSL. Action skipped."
        return 0
    fi

    # Only run on Debian-based distributions
    if ! is_package_installed "flatpak"; then
        local dependencies=("flatpak" "gnome-software-plugin-flatpak")        
        
        install_packages true "${dependencies[@]}"
        
        # Add flathub remote if not already added
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        
        # Inform the user about the required restart
        log_success "Installed Flatpak. A restart will be required before installing packages.${NC}"
        suggest_restart=true
        return 0
    fi

    local to_install=()
    for package in "${FLATPAK_PACKAGES[@]}"; do
	    if ! is_flatpak_package_available "$package"; then
            log_warning "Skipped $package: flatpak package not found."
        elif ! is_flatpak_package_installed "$package"; then
		    to_install+=("$package")
	    fi
    done

    if [[ "${#to_install[@]}" -gt 0 ]]; then
        echo "The following Flatpak packages will be installed: ${to_install[*]}"
        echo -e "${BOLD_MAGENTA} Press 'y/Y' (or wait $TIMEOUT seconds) to proceed; otherwise, press any other key to abort.${NC}"
        # Read user input with a timeout
        read -t "$TIMEOUT" -n 1 -r -p "Proceed? (press 'y/Y' or wait): " choice || choice='y'
        if [[ "$choice" =~ [yY] ]]; then
            echo
            local packages_installed=()
            for package in "${to_install[@]}"; do
                flatpak install -y --noninteractive flathub "$package"
                if [ $? -ne 0 ]; then
                    log_error "Failed to install Flatpak $package. Please check manually."
                else
                    packages_installed+=("$package")
                fi
            done
            if [[ "${#packages_installed[@]}" -gt 0 ]]; then
                log_success "Installed Flatpak packages: $packages_installed"
            fi
        else
            log_warning "Skipped installing: ${to_install[*]}"
        fi
    fi
}


set_faster_downloads_fedora(){
    echo
    echo "Configuring DNF for faster downloads..."
    
    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped configuring DNF for faster downloads."
        return 0
    fi

    # Check if the values are already present
    if grep -q "^max_parallel_downloads=10$" /etc/dnf/dnf.conf || grep -q "^fastestmirror=True$" /etc/dnf/dnf.conf; then
        log_warning "max_parallel_downloads or fastestmirror already present in /etc/dnf/dnf.conf. Skipped configuring DNF for faster downloads."
        return 0
    fi

    echo -e "max_parallel_downloads=10\nfastestmirror=True" | sudo tee -a /etc/dnf/dnf.conf > /dev/null
    suggest_restart=true

    log_success "Configured DNF for faster downloads."
}


install_non_free_media_codecs(){
    echo
    echo "Installing non free media codecs..."

	# https://rpmfusion.org/Configuration
	# Installing Free and Nonfree Repositories
	sudo dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
	
    # On Fedora, we default to use the openh264 library
	sudo dnf config-manager --enable fedora-cisco-openh264
    # https://fedoraproject.org/wiki/OpenH264
	# enable OpenH264 on Firefox
	sudo dnf install -y mozilla-openh264

	# RPM Fusion repositories also provide Appstream metadata to enable users to install # packages using Gnome Software/KDE Discover
	sudo dnf update -y @core
	
	# https://rpmfusion.org/Howto/Multimedia#Hardware_codecs_with_AMD_.28mesa.29
	# Switch to full ffmpeg
	sudo dnf swap -y ffmpeg-free ffmpeg --allowerasing

	# Install additional codecs
	sudo dnf update -y @multimedia --setopt="install_weak_deps=False" --exclude=PackageKit-gstreamer-plugin
	# In the documentation it is used the first cmd but it fails due to non existing sound-and-video group
	sudo dnf update -y @sound-and-video &> /dev/null || sudo dnf install -y @sound-and-video

	if grep -q AuthenticAMD /proc/cpuinfo; then
        sudo dnf swap -y mesa-va-drivers mesa-va-drivers-freeworld
        sudo dnf swap -y mesa-vdpau-drivers mesa-vdpau-drivers-freeworld
	elif grep -q GenuineIntel /proc/cpuinfo; then
        sudo dnf install -y intel-media-driver
	else
        log_warning "Current machine is not based on AMD or Intel. Skipped installing additional media codecs."
        return 0
	fi

	# Make available vainfo
	sudo dnf install -y libva-utils

    log_success "Installed non-free media codecs."
}

enable_firefox_hw_acceleration(){
    echo
    echo "Enabling Firefox hardware acceleration..."

    # To enable hardware acceleration on Firefox (optional but highly advised) you should:\n Make sure to enable it on Settings->Performance or just set gfx.webrender.all to true\n Enable OpenH264 Video Codec add-on (from Cisco) on Settings->Add-ons&Themes->Plugins\n In about:config (type it in the search bar) set the following fields to true:\n media.ffmpeg.vaapi.enabled\n gfx.webrender.all (if you enabled HW on settings there is no need here)\n media.gmp-gmpopenh264.autoupdate\n media.gmp-gmpopenh264.enabled\n media.gmp-gmpopenh264.provider.enabled\n"
    # (You can use 'vainfo' to check for AV1 hardware support.\n Typically, YouTube enforces this format without considering your system's compatibility,\n which may lead to increased battery usage. If your system doesn't support AV1, set media.av1.enabled to false.\n However, keep in mind that if the source stream is exclusively in AV1 format (rarely), you won't be able to play the video unless you change this setting back to true.)
    firefox_dir="$HOME/.mozilla/firefox"

    # Function to check for Firefox profiles
    check_firefox_profiles() {
        [ -d "$firefox_dir" ] && [ -n "$(find "$firefox_dir" -maxdepth 1 -type d -name "*.default*")" ]
    }

    # Check for Firefox profiles
    # Create a Firefox profile if none exists
    if ! check_firefox_profiles; then
        echo "No Firefox profile found. Creating a default profile..."
        firefox --headless &> /dev/null &
        firefox_pid=$!
        
        # Wait for a short time to ensure Firefox has time to create the profile
        sleep 5
        
        # Kill the Firefox process
        kill $firefox_pid &>/dev/null
        
        # Wait for the process to fully terminate
        wait $firefox_pid &>/dev/null
        
        # Check again for profiles
        if ! check_firefox_profiles; then
            log_warning "Failed to create a Firefox profile. Please run Firefox manually before executing this script."
            return 0
        fi
    fi
     
    # Find the most recently modified profile directory
    profile_path=$(find "$firefox_dir" -maxdepth 1 -type d -name "*.default*" -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ")
    
    # Backup the existing user.js file if it exists
    profile_file="$profile_path/user.js"
    if [ -f "$profile_file" ]; then
        profile_backup="$profile_file.backup_$(date +%Y%m%d_%H%M%S)"
        cp "$profile_file" "$profile_backup"
        log_info "File $profile_file already existed. Backup $profile_backup created with original values."
    fi
    
    set_pref() {
        local pref=$1
        local value=$2
        
        if [ -f "$profile_file" ] && grep -q "user_pref(\"$pref\"," "$profile_file"; then
            sed -i "s|user_pref(\"$pref\",[^)]*)|user_pref(\"$pref\", $value)|" "$profile_file"
        else
            echo "user_pref(\"$pref\", $value);" >> "$profile_file"
        fi
    }

    set_pref "gfx.webrender.all" true
    set_pref "media.ffmpeg.vaapi.enabled" true
    set_pref "media.gmp-gmpopenh264.autoupdate" true
    set_pref "media.gmp-gmpopenh264.enabled" true
    set_pref "media.gmp-gmpopenh264.provider.enabled" true
    
    if ! vainfo 2>/dev/null | grep -q "AV1"; then
        set_pref "media.av1.enabled" false
    fi

    log_success "Enabled Firefox's hardware acceleration. You can check the file $profile_file to see the modified flags."
}


enable_hw_acceleration_support_fedora(){
    echo
    echo "Enabling system and Firefox hardware acceleration support..."
	
    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped enabling system and Firefox hardware acceleration support."
        return 0
    fi

    install_non_free_media_codecs
    enable_firefox_hw_acceleration
}


set_governor_to_performance_fedora(){
    echo
    echo "Setting the governor mode to performance..."
    
    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped setting the CPU governor mode to performance."
        return 0
    fi

    # Check if the governor is already in performance mode and skip
    # the service creation
    governor=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor) 

    if [ "$governor" = "performance" ]; then
        log_warning "The CPU scaling governor is already set to 'performance'. No need to create a startup service for it. Action skipped."
        return 0
    fi
    
    local script_name="change_governor.sh"
    local script_dir="$HOME/.startup_scripts"
    local script_path="$script_dir/$script_name"
    local script_content=$(cat <<- 'EOF'
#!/usr/bin/bash
echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
EOF
)

    local service_name="change_governor.service"
    local service_dir="/etc/systemd/system"
    local service_path="$service_dir/$service_name"
    local service_content=$(envsubst <<- EOF
[Unit]
Description=Change governor to performance

[Service]
ExecStart=/usr/bin/bash $script_path
User=root
Group=root
Type=simple
RemainAfterExit=no

[Install]
WantedBy=multi-user.target
EOF
)

    if [ -f "$script_path" ]; then
        log_warning "The $script_name already exists in $script_dir. No need to create it. Action skipped."
        return 0
    fi

    mkdir "$script_dir" && touch "$script_path"
    echo "$script_content" > "$script_path"
    sudo chmod +x "$script_path"

    if [ -f "$service_path" ]; then
        log_warning "Skipped creating $service_name because it already exists in $service_dir. Manual check required. You are advised to run:\nsudo systemctl status $service_name"
        return 0
    fi

    sudo touch "$service_path"
    echo "$service_content" | sudo tee "$service_path" > /dev/null
    sudo chmod +x "$service_path"

    sudo systemctl daemon-reload > /dev/null
    sudo systemctl enable "$service_name" > /dev/null
    sudo systemctl start "$service_name" > /dev/null
    suggest_restart=true

    log_success "Set governor mode to performance."
}


set_yaru_icons_fedora(){
    echo
    echo "Setting yaru icons... "

    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped setting Yaru icons."
        return 0
    fi

    current_icon_theme=$(gsettings get org.gnome.desktop.interface icon-theme)

    local icon_theme='Yaru-prussiangreen-dark'
    if [[ "$current_icon_theme" == *Yaru* ]]; then
        log_warning "The $current_icon_theme icons are already enabled. Action skipped."
        return 0
    fi

    local dependencies=("yaru-theme") 
    install_packages true "${dependencies[@]}"

    #gsettings set org.gnome.desktop.interface gtk-theme 'Yaru-prussiangreen-dark'
    #gsettings set org.gnome.desktop.wm.preferences theme 'Yaru'
    gsettings set org.gnome.desktop.interface icon-theme "$icon_theme"

    log_success "Set yaru icons theme."
}


disable_ppd_color_change_fedora(){
    # Laptops with integrated Radeon graphics have a dedicated hardware function
    # to decrease panel power consumption in exchange for color accuracy. This
    # function is used when the system is on battery and the user has selected
    # the "balanced" or "power-saver" profiles.
    # Read current val with cat /sys/module/amdgpu/parameters/abmlevel
    # -1 for 'auto' (let PPD decide)
    # 0 for 'AC' and 'performance' (full brightness)
    # 1 for 'balanced' (good balance and got better battery consuption than with 2, weird)
    # 3 for 'power save' (way to aggresive with colors)
    # 4 (I won't even try)
    # "https://www.kernel.org/doc/html/v5.10/gpu/amdgpu.html"
    # "https://gitlab.freedesktop.org/3v1n0/power-profiles-daemon"
    echo
    echo "Disabling gnome power-profile-daemon (PPD) color change... "


    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution: $DISTRO is not Fedora. Skipped disabling gnome power-profile-daemon (PPD) color change."
        return 0
    fi

    if ! grep -q AuthenticAMD /proc/cpuinfo; then
        log_warning "Current machine is not AMD based. Skipped disabling GNOME power-profile-daemon (PPD) color change."
        return 0
    fi

    # File path
    GRUB_FILE="/etc/default/grub"

    if grep -q "amdgpu.abmlevel" "$GRUB_FILE"; then
        log_warning "amdgpu.abmlevel already exists in $GRUB_FILE. Verify manually its value and change it to 0 (to disable PPD from modifying colors). Action skipped."
        return 0
    fi

    sudo sed -i '/GRUB_CMDLINE_LINUX/s/"\(.*\)"/"\1 amdgpu.abmlevel=0"/' "$GRUB_FILE"
    if [ $? -eq 0 ]; then
        sudo grub2-mkconfig -o /boot/grub2/grub.cfg
        suggest_restart=true
        log_success "Disabled gnome power-profile-daemon (PPD) color change."
    fi
}

install_cloudflare_warp_fedora(){
    # WARNING: When installed, there seems to be an issue that prevents starting gnome's camera (snapshot)\n  without manually restarting the PipeWire service. However, the system's camera will remain\n  available and usable, just not through the snapshot feature. It is also possible to experience\n  further issues with PipeWire. CAUTION IS ADVISED."
    echo
    echo "Installing cloudfare warp... "

    if [[ "$DISTRO" != "fedora" ]]; then
        log_warning "Current distribution $DISTRO is not Fedora. Skipped installing Cloudflare Warp."
        return 0
    fi

    # Add repository

    if ! dnf repolist | grep -q cloudflare-warp-stable; then
        sudo dnf config-manager --add-repo https://pkg.cloudflareclient.com/cloudflare-warp-ascii.repo
    fi

    sudo dnf makecache -y
    sudo dnf install -y cloudflare-warp

    local resolved_path="/etc/systemd/resolved.conf"
    
    local resolved_content=$(cat <<- 'EOF'
[Resolve]
ResolveUnicastSingleLabel=yes
EOF
)
    if [ -s "$resolved_path" ]; then
        log_warning "While installing cloudflare warp, it was found that the file $resolved_path had an existing configuration. Action skipped. Manual check required."
        return 0
    fi

    echo "$resolved_content" | sudo tee "$resolved_path" > /dev/null

    sudo systemctl restart systemd-resolved.service
    
    # Add aliases to zshrc
    local zshrc_path="$HOME/.zshrc"
    local zshrc_content=$(cat <<- 'EOF'
# Cloudflare warp aliases
alias warpc='warp-cli connect'
alias warpd='warp-cli disconnect'
alias warps='warp-cli status'
EOF
)
    echo "$zshrc_content" >> "$zshrc_path"
    source $zshrc_path

    # Register a new session with cloudflare warp and accept terms and conditions
    echo y | sudo warp-cli registration new
    
    log_success "Cloudflare Warp has been installed. Use 'warp-cli --help' for more information. If you used the script's option 1 or 3 for generating the Zsh config, you can also use the following shortcuts:\n• warpc for connecting\n• warpd for disconnecting\n• warps for status."
}


check_running_conditions(){
    supported_distros=("fedora" "debian" "ubuntu")
    found_distro=false
    for supported_distro in "${supported_distros[@]}"; do
        if [[ "$DISTRO" == "$supported_distro" ]]; then
            found_distro=true
            break
        fi
    done

    if ! "$found_distro"; then
        log_error "The current Linux distribution is not supported. This script is only intended for running on ${supported_distros[@]}."
        echo -e "$ERROR The current Linux distribution is not supported. This script is only intended for running on ${supported_distros[@]}. Exiting..."
        exit 1
    fi

    if [[ -z "$WSL_DISTRO_NAME" && "$XDG_CURRENT_DESKTOP" != *GNOME* ]];  then
        log_error "The current Desktop Environment is not supported. This script is only intended for running on GNOME."
        echo -e "$ERROR The current Desktop Environment is not supported. This script is only intended for running on GNOME. Exiting..."
        exit 1
    fi
}


check_package_manager(){
    # Check for system's pending restart
    case "$DISTRO" in
    "fedora")
        ! dnf needs-restarting -r &> /dev/null
        ;;
    "debian" | "ubuntu")
        [ -f /var/run/reboot-required ] || [ -d /var/run/reboot-required.d ]
        ;;
    esac
    if [[ "$?" -eq 0 ]]; then
        log_error "Your system has pending updates. Please restart it and re-run the script."
        echo -e "$ERROR Your system has pending updates. Please restart it and re-run the script. Exiting..."
        exit 1
    fi

    # Select package manager and update its cache
    echo "Updating system's package manager cache..."
    case "$DISTRO" in
    "fedora")
        sudo dnf makecache -y
        package_manager="dnf"
        ;;
    "debian" | "ubuntu")
        sudo apt update -y
        package_manager="apt"
        ;;
    esac
}


ask_user_confirmation() {
    local prompt="$1"
    local response

    read -p "$prompt (y/n): " response
    case $response in
        [Yy]* ) return 0;;
        [Nn]* ) return 1;;
        * ) echo "Invalid response. Please answer y/Y or n/N."; return 1;;
    esac
}


# Function to count initial lines
count_log_file_lines() {
    if [[ -f "$LOG_FILE" ]]; then
        wc -l < "$LOG_FILE"
    else
        echo 0
    fi
}

main(){
    clear
    check_running_conditions
    check_package_manager
    clear

    while true; do
        clear
        INITIAL_LINES="$(count_log_file_lines)"
        echo "--------------------------- Setup Options ---------------------------"
        echo "1- Minimal system setup"
        echo "   • Install additional packages"
        echo "   • Set up Zsh with plugins (syntax highlighting, autosuggestions, etc.)"
        echo "   • Install Caskaydia Nerd Font"
        echo "   • Install and configure Neovim with kickstart"
        echo "   • Set up Git (install, configure, generate SSH key)"
        echo "2- Install Flatpak packages"
        echo "3- Full system setup (includes options 1 and 2)"
        echo "-------------------------- Fedora Options --------------------------"
        echo "4- Enable system's and Firefox hardware acceleration support"
        echo "   • Install additional non-free media codecs (h.264, etc.)"
        echo "   • Enable system-wide and Firefox's hardware acceleration support"
        echo "5- Disable GNOME power-profile-daemon color change (AMD-based)"
        echo "6- Set Yaru icon theme"
        echo "7- Configure DNF for faster downloads (Proceed if you know what you are doing!)"
        echo "8- Set governor mode to performance permanently (Proceed if you know what you are doing!)"
        echo "----------------------- Fedora Unstable Options --------------------"
        echo "9- Install Cloudflare WARP (VPN-like service)"
        echo "   WARNING: May cause issues with GNOME camera and PipeWire"
        echo "q- Quit"
        echo "--------------------------------------------------------------------"
        echo "Note: All options will only be applied if not already set/configured."

        read -p "Enter the option/s you would like to perform (1, 2, 3, 4, 5, 6, 7, 8, 9 or q): " selection
        case "$selection" in
            1)
                if ! ask_user_confirmation "You selected to perform a minimal system setup. Would you like to proceed?"; then
                    continue
                fi
                install_additional_packages
                setup_terminal
                setup_neovim
                setup_git
                ;;
            2)
                if ! ask_user_confirmation "You selected to install the flatpak packages. Would you like to proceed?"; then
                    continue
                fi
                install_flatpak_packages
                ;;  
            3)
                if ! ask_user_confirmation "You selected to perform a full system setup. Would you like to proceed?"; then
                    continue
                fi
                install_additional_packages
                setup_terminal
                setup_neovim
                install_flatpak_packages
                setup_git
                ;;
            4)
                if ! ask_user_confirmation "You selected to enable system's and Firefox hardware acceleration support. Would you like to proceed?"; then
                    continue
                fi
                enable_hw_acceleration_support_fedora
                ;;            
            5)
                if ! ask_user_confirmation "You selected to disable GNOME power-profile-daemon color change. Would you like to proceed?"; then
                    continue
                fi
                disable_ppd_color_change_fedora
                ;;
            6)
                if ! ask_user_confirmation "You selected to set yaru icons theme. Would you like to proceed?"; then
                    continue
                fi
                set_yaru_icons_fedora
                ;;
            7)
                if ! ask_user_confirmation "You selected to configure the DNF for faster downloads. Would you like to proceed?"; then
                    continue
                fi
                set_faster_downloads_fedora
                ;;
            
            8)
                if ! ask_user_confirmation "You selected to set the power mode to performance permanently. Would you like to proceed?"; then
                    continue
                fi
                set_governor_to_performance_fedora
                ;;
            9)
                if ! ask_user_confirmation "You selected to install cloudflare warp. Would you like to proceed?"; then
                    continue
                fi
                install_cloudflare_warp_fedora
                ;;
            q)
                echo "Exited."
                exit 0
                ;;
            *)
                echo
                continue
                ;;
        esac
        
        # Check if the log file exists and is not empty
        if [[ -f "$LOG_FILE" && -s "$LOG_FILE" ]]; then
            echo -e "\n-------------------------- Log Summary ----------------------------"
            tail -n +$((INITIAL_LINES + 1)) "$LOG_FILE"
            echo "--------------------------------------------------------------------"
        fi
        if "$suggest_restart"; then
            echo -e "Some changes need a system restart to take effect. Please RESTART your system to finish."
        fi
        read -p "Press Enter to continue..."
    done
}

main
